{"version":3,"sources":["algorithms/cuttingPlane.js","algorithms/simplexTableau.js","components/NavBar.js","components/PlotGraph.js","examples/index.js","components/ExamplesManager.js","components/InfoBox.js","components/OriginalProblem.js","components/Tableau.js","components/LPP.js","App.js","serviceWorker.js","index.js","utils.js"],"names":["computeSlackOrLine","slacks","bOverbarRim","BInvBRim","xBLabels","FOverbarRim","xFLabels","mode","x1Index","indexOf","x2Index","a","b","sign","toAdd","forEach","el","i","push","map","n","slack","reduce","prev","curr","optimalityTest","xStar","some","findIndex","x","Number","isInteger","formatNumber","_","require","dualFindPivot","cPrimeBarF","FOverbar","indexT","indexH","minValue","rowT","idx","valueIndexT","Math","abs","minLabelInt","parseInt","replace","showPivot","showIndexH","dualOptimalityTest","bOverbar","length","findPivot","colH","matrix","getCol","valueIndexH","showIndexT","init","A","cPrime","B","identity","range","BInv","inverse","F","slice","BInvB","multiply","bPrime","transpose","cPrimeB","zeros","cPrimeF","cBar0","cPrimeBarB","cPrimeBFOverbar","subtraction","point","getPoint","printTableau","console","log","JSON","stringify","l","updateTableau","prevTableau","aTH","zPivot","rowScale","rowAddMultiple","swapColumns","useStyles","makeStyles","theme","createStyles","appBar","zIndex","paddingLeft","spacer","width","toolbar","margin","NavBar","classes","AppBar","position","className","Toolbar","Typography","variant","color","typography","Plot","createPlotlyComponent","Plotly","PlotGraph","props","drawLines","feasibleRegion","lines","maxX","polygon","title","commonLine","type","line","dash","y","getY","getX","x0","y0","x1","y1","perimeter","shapes","polygonPath","acc","join","path","fillcolor","feasibleRegionXs","feasibleRegionYs","data","marker","size","name","align","display","style","height","layout","hovermode","xaxis","scaleanchor","scaleratio","yaxis","responsive","example1","example2","example3","doc","ExamplesManager","useState","clicked","setClicked","Object","keys","files","k","key","loading","Description","onClick","getFile","fontSize","CircularProgress","info","listStyleType","padding","infoEntry","textAlign","InfoBox","OriginalProblem","problem","objectiveFunction","subjectTo","constructEquation","arr","equation","cost","objectiveFunctionString","constraintsString","contraint","text","empty","pivot","backgroundColor","pivotColumn","pivotRow","Tableau","page","Boolean","Table","TableHead","TableRow","TableCell","TableBody","n1","j","numbers","button","float","marginTop","marginRight","border","drop","marginLeft","transition","dropClosed","generator","graph","whiteSpace","grid","paper","paperDiv","paperDivHide","overflow","LPP","setFeasibleRegion","file","setFile","setLines","setLoading","setMaxX","message","setMessage","phase","setPhase","setPolygon","stage","setStage","step","setStep","history","setHistory","setPage","finished","setFinished","findBoundingBox","polygonMaxX","polygonMaxY","polygonMinX","polygonMinY","floor","findIntegerFeasibleRegion","boundingBox","every","l_p1","l_p2","determinant","findIntersection","segment","c","x2","y2","Infinity","lambda","handleHistory","next","onIntegerSimplexAlgorithm","onAdd","thisPolygon","s","polygonLeft","polygonRight","currentPolygon","intersections","p1","p2","intersection","barycenter","d","algorithm","newPage","parse","bOverbarGen","BInvBGen","FOverbarGen","bOverbarGenFloor","BInvBGenFloor","FOverbarGenFloor","includes","genRowIndex","onSimplexAlgorithm","infeasible","newLine","newSlackIndex","xBLabelsOld","initValues","isNaN","bOverbarIndexes","nonZeroElements","count","filter","minNonZeroCount","min","multiplyByMinusOne","f","thisFile","startLines","startPolygon","thisLine","startFeasibleRegion","maxxxX","max","drawAdmissiblePlan","Paper","Grid","container","direction","item","xs","Button","disabled","root","logo","header","minHeight","flexDirection","alignItems","justifyContent","link","top","flexGrow","minWidth","centerPane","App","basename","exact","component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","num","round","EPSILON","xBLables","x1Idx","x2Idx","r","isFinite"],"mappings":"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","file":"static/js/main.aa2e738b.chunk.js","sourcesContent":["import { formatNumber } from '../utils';\r\n\r\nexport const computeSlackOrLine = (slacks, bOverbarRim, BInvBRim, xBLabels, FOverbarRim, xFLabels, mode='slack') => {\r\n    let x1Index = xBLabels.indexOf('x1');\r\n    let x2Index = xBLabels.indexOf('x2');\r\n    let a = null,\r\n        b = null;\r\n\r\n    let sign = -1;\r\n    if(mode==='line') sign = 1;\r\n\r\n    let toAdd = [];\r\n\r\n    //Different booleans: one in base, one out of base\r\n    if(x1Index>=0 ^ x2Index>=0){\r\n        //x1 in base\r\n        if(x1Index>=0){\r\n            x2Index = xFLabels.indexOf('x2');\r\n            b = FOverbarRim[x2Index];\r\n\r\n            a = BInvBRim[x1Index];\r\n\r\n            xBLabels.forEach((el, i) => {\r\n                if(i !== x1Index && BInvBRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*BInvBRim[i]));\r\n            })\r\n\r\n            xFLabels.forEach((el, i) => {\r\n                if(i!== x2Index && FOverbarRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*FOverbarRim[i]));\r\n            })\r\n        }\r\n        //x2 in base\r\n        else{\r\n            x1Index = xFLabels.indexOf('x1');\r\n            a = FOverbarRim[x1Index];\r\n\r\n            b = BInvBRim[x2Index];\r\n\r\n            xBLabels.forEach((el, i) => {\r\n                if(i!== x2Index && BInvBRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*BInvBRim[i])); \r\n            })\r\n\r\n            xFLabels.forEach((el, i) => {\r\n                if(i !== x1Index && FOverbarRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*FOverbarRim[i]));\r\n            })\r\n        }\r\n    }\r\n    //Same booleans: both in or out of base\r\n    else{\r\n        //both in base\r\n        if(x1Index>=0){\r\n            a = BInvBRim[x1Index];\r\n            b = BInvBRim[x2Index];\r\n\r\n            xBLabels.forEach((el, i) => {\r\n                if(i !== x1Index && i!== x2Index && BInvBRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*BInvBRim[i]));\r\n            })\r\n\r\n            xFLabels.forEach((el, i) => {\r\n                if(FOverbarRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*FOverbarRim[i]));\r\n            })\r\n        }\r\n        //both out of base\r\n        else{\r\n            x1Index = xFLabels.indexOf('x1');\r\n            x2Index = xFLabels.indexOf('x2');\r\n            \r\n            a = FOverbarRim[x1Index];\r\n            b = FOverbarRim[x2Index];\r\n\r\n            xFLabels.forEach((el, i) => {\r\n                if(i !== x1Index && i!== x2Index && FOverbarRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*FOverbarRim[i]));\r\n            })\r\n\r\n            xBLabels.forEach((el, i) => {\r\n                if(BInvBRim[i] !== 0) toAdd.push(slacks[el].map(n => sign*n*BInvBRim[i]));\r\n            })\r\n        }\r\n    }\r\n\r\n    const slack = toAdd.reduce((prev, curr) => curr.map((el, i) => el + prev[i]), [a, b, bOverbarRim]);\r\n\r\n    return mode === 'line' ? [...slack, -1] : slack;\r\n}\r\n\r\nexport const optimalityTest = (xStar) => {\r\n    //INFEASIBLE SOLUTION\r\n    if(xStar.some(n => n<0)) return null;\r\n\r\n    return xStar.findIndex(x => !Number.isInteger(formatNumber(x[0])));\r\n}","import { matrix } from 'numbers';\r\nimport { getPoint, swapColumns } from '../utils';\r\n\r\nconst _ = require('lodash');\r\n\r\n\r\nexport const dualFindPivot = (cPrimeBarF, FOverbar, indexT, xFLabels) => {\r\n    let indexH = null, minValue = null;\r\n    let rowT = FOverbar[indexT];\r\n\r\n    cPrimeBarF[0].forEach((el, idx) => {\r\n        if(rowT[idx] < 0){\r\n            let valueIndexT = el / Math.abs(rowT[idx]);\r\n\r\n            //Bland's rule (Dual)\r\n            if(valueIndexT === minValue){\r\n                const minLabelInt = parseInt(xFLabels[indexH].replace('x', ''));\r\n                const valueIndexTLabelInt = parseInt(xFLabels[idx].replace('x', ''));\r\n\r\n                if(valueIndexTLabelInt < minLabelInt){\r\n                    minValue = valueIndexT;\r\n                    indexH = idx;\r\n                }\r\n            }\r\n            else if(valueIndexT < minValue || minValue === null){\r\n                minValue = valueIndexT;\r\n                indexH = idx;\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        rowT, indexH, showPivot: true, showIndexH: true\r\n    }\r\n}\r\n\r\nexport const dualOptimalityTest = (bOverbar) => {\r\n    for(let i=0; i < bOverbar.length; i++) if(bOverbar[i][0] < 0) return i;\r\n    return null\r\n}\r\n\r\nexport const findPivot = (bOverbar, FOverbar, indexH) => {\r\n    let indexT = null, minValue = null;\r\n    let colH = matrix.getCol(FOverbar, indexH);\r\n\r\n    bOverbar.forEach((el, idx) => {\r\n        if(colH[idx] > 0){\r\n            let valueIndexH = el[0] / colH[idx];\r\n\r\n            if(valueIndexH < minValue || minValue === null){\r\n                minValue = valueIndexH;\r\n                indexT = idx;\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        indexT, showPivot: true, showIndexT: true\r\n    }\r\n}\r\n\r\nexport const init = (A, b, cPrime) => {\r\n    let B = matrix.identity(A.length)\r\n\r\n    let xFLabels = _.range(1, A.length+1).map(n => `x${n}`);\r\n    let xBLabels = _.range(xFLabels.length+1, xFLabels.length+A.length+1).map(n => `x${n}`);\r\n\r\n    let BInv = matrix.inverse(B);\r\n    let F = A.slice();\r\n\r\n    let BInvB = matrix.multiply(BInv, B);\r\n\r\n    //TRASPOSTO PERCHE' DAL FILE LO STO PASSANDO COME UN VETTORE RIGA, MA DEVE ESSERE UN VETTORE COLONNA\r\n    let bPrime = matrix.transpose([b]);\r\n    \r\n    let bOverbar = matrix.multiply(BInv, bPrime);\r\n    let FOverbar = matrix.multiply(BInv, F);\r\n\r\n    //VETTORE DEI COSTI DELLE VARIABILI IN BASE: NULLO ALL'INIZIO PERCHE' HO LE SLACK IN BASE\r\n    let cPrimeB = matrix.zeros(1, B.length);\r\n\r\n    //VETTORE DEI COSTI DELLE VARIABILI FUORI BASE\r\n    let cPrimeF = [cPrime.slice()];\r\n\r\n    let cPrimeBbOverbar = matrix.multiply(cPrimeB, bOverbar);\r\n    let cBar0 = -cPrimeBbOverbar[0][0];\r\n\r\n    //VETTORE DEI COSTI RIDOTTI DELLE VARIABILI IN BASE: NULLO ALL'INIZIO PERCHE' HO LE SLACK IN BASE\r\n    let cPrimeBarB = matrix.zeros(1, B[0].length)\r\n\r\n    //VETTORE DEI COSTI RIDOTTI DELLE VARIABILI FUORI BASE\r\n    let cPrimeBFOverbar = matrix.multiply(cPrimeB, FOverbar);\r\n    let cPrimeBarF = matrix.subtraction(cPrimeF, cPrimeBFOverbar);\r\n\r\n    let point = getPoint(xBLabels, bOverbar);\r\n\r\n    let slacks = {}\r\n\r\n    xBLabels.forEach((el,i) => {\r\n        slacks[el] = [\r\n            ...FOverbar[i].map(n => -n),\r\n            bOverbar[i][0]\r\n        ]\r\n    });\r\n\r\n    return {\r\n        cBar0, xBLabels, xFLabels, cPrimeBarB, cPrimeBarF, bOverbar, BInvB, FOverbar, point, slacks\r\n    }\r\n}\r\n\r\nexport const optimalityTest = cPrimeF => {\r\n    for(let i=0; i < cPrimeF.length; i++) if(cPrimeF[i] < 0) return i;\r\n}\r\n\r\nexport const printTableau = (cBar0, xBLabels, xFLabels, cPrimeBarB, cPrimeBarF, bOverbar, BInvB, FOverbar) => {\r\n    console.log('  ', 'cBar0', JSON.stringify(xBLabels), JSON.stringify(xFLabels));\r\n    console.log('-z', cBar0, JSON.stringify(cPrimeBarB[0]), JSON.stringify(cPrimeBarF[0]));\r\n    for(let l=0; l<bOverbar.length; l++){\r\n        console.log(xBLabels[l], bOverbar[l][0], JSON.stringify(BInvB[l]), JSON.stringify(FOverbar[l]));\r\n    }\r\n    console.log('\\n');\r\n}\r\n\r\nexport const updateTableau = (prevTableau) => {\r\n    let { cBar0, bOverbar, BInvB, FOverbar, cPrimeBarB, cPrimeBarF, xBLabels, xFLabels } = prevTableau;\r\n    const { indexH, indexT } = prevTableau;\r\n\r\n    const colH = matrix.getCol(FOverbar, indexH);\r\n\r\n    prevTableau.showPivot = false;\r\n    prevTableau.showIndexH = false;\r\n    prevTableau.showIndexT = false;\r\n\r\n    let aTH = colH[indexT];\r\n\r\n    //UPDATING TABLES\r\n    let zPivot = cPrimeBarF[0][indexH];\r\n\r\n    bOverbar = matrix.rowScale(bOverbar, indexT, 1/aTH);\r\n    BInvB = matrix.rowScale(BInvB, indexT, 1/aTH);\r\n    FOverbar = matrix.rowScale(FOverbar, indexT, 1/aTH);\r\n\r\n    cBar0 -= zPivot*bOverbar[indexT];\r\n\r\n    cPrimeBarB = matrix.subtraction(cPrimeBarB, [matrix.rowScale(BInvB, indexT, zPivot)[indexT]]);\r\n    cPrimeBarF = matrix.subtraction(cPrimeBarF, [matrix.rowScale(FOverbar, indexT, zPivot)[indexT]]);\r\n    \r\n    for(let l=0; l<bOverbar.length; l++){\r\n        if(l === indexT) continue;\r\n\r\n        bOverbar = matrix.rowAddMultiple(bOverbar, indexT, l, -colH[l]);\r\n        BInvB = matrix.rowAddMultiple(BInvB, indexT, l, -colH[l]);\r\n        FOverbar = matrix.rowAddMultiple(FOverbar, indexT, l, -colH[l]);\r\n    }\r\n    \r\n    [BInvB, FOverbar] = swapColumns(BInvB, indexT, FOverbar, indexH);\r\n    [cPrimeBarB, cPrimeBarF] = swapColumns(cPrimeBarB, indexT, cPrimeBarF, indexH);\r\n\r\n    [xBLabels[indexT], xFLabels[indexH]] = [xFLabels[indexH], xBLabels[indexT]];\r\n\r\n    return {\r\n        ...prevTableau, \r\n        ...{\r\n            cBar0, bOverbar, BInvB, FOverbar, cPrimeBarB, cPrimeBarF, \r\n            point: getPoint(xBLabels, bOverbar), xBLabels, xFLabels\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Typography } from '@material-ui/core/';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n  appBar: {\r\n    zIndex: 10,\r\n    paddingLeft: 0\r\n  },\r\n  spacer: {\r\n    width: 20\r\n  },\r\n  toolbar: {\r\n    margin: 0,\r\n    paddingLeft: \"10px !important\"\r\n  }\r\n}));\r\n\r\nlet NavBar = () => {\r\n  const classes = useStyles();\r\n    \r\n  return(\r\n    <AppBar position=\"absolute\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n          <span className={classes.spacer}/>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.typography}>\r\n              DECISION SCIENCE\r\n          </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  ) \r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport { getX, getY } from '../utils';\r\n\r\nimport Plotly from 'plotly.js';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nlet getPolygonPath = (perimeter) => perimeter.length ? `M${perimeter.reduce((acc, n) => `${acc}L${n.join(',')}`)}Z` : '';\r\n\r\nlet PlotGraph = (props) => {\r\n  var drawLines = []\r\n\r\n  const { feasibleRegion, lines, maxX, point, polygon, title } = props;\r\n\r\n  if(lines) drawLines = lines.map( n => {\r\n    let commonLine = {\r\n      type: 'line',\r\n      line: {\r\n        color: 'rgb(200, 0, 0)',\r\n        width: 1,\r\n        dash: 'dot'\r\n      }\r\n    }\r\n\r\n    if(n[0] === 0) {\r\n      const y = getY(n, maxX);\r\n      const x = getX(n, y);\r\n\r\n      return {\r\n        ...commonLine,\r\n        x0: -x, y0: y,\r\n        x1: x, y1: y\r\n      }\r\n    }\r\n\r\n    if(n[1] === 0) {\r\n      const x = getX(n, maxX);\r\n      const y = getY(n, x);\r\n\r\n      return {\r\n        ...commonLine,\r\n        x0: x, y0: -y,\r\n        x1: x, y1: y\r\n      }\r\n    }\r\n    \r\n    return {\r\n      ...commonLine,\r\n      x0: -maxX, y0: getY(n, -maxX),\r\n      x1: maxX, y1: getY(n, maxX)\r\n    }\r\n  });\r\n\r\n\r\n  let shapes = [...drawLines]\r\n  \r\n  let polygonPath = getPolygonPath(polygon)\r\n  if(polygonPath) shapes.push({\r\n    type: 'path',\r\n    path: polygonPath,\r\n    fillcolor: 'rgba(0, 0, 184, 0.2)',\r\n    line: {\r\n      color: 'rgb(0, 0, 184)',\r\n      width: 1,\r\n    }\r\n  })\r\n  \r\n  let feasibleRegionXs = [];\r\n  let feasibleRegionYs = [];\r\n  feasibleRegion.forEach(el => {\r\n    feasibleRegionXs.push(el[0]);\r\n    feasibleRegionYs.push(el[1]);\r\n  });\r\n\r\n  if(!feasibleRegion.length){\r\n    feasibleRegionXs = [null];\r\n    feasibleRegionYs = [null];\r\n  }\r\n\r\n  const data = [{\r\n    marker: {\r\n      color: 'blue',\r\n      size: 3\r\n    },\r\n    mode: 'markers',\r\n    name: 'feasible solutions',\r\n    type: 'scatter',\r\n    x: feasibleRegionXs,\r\n    y: feasibleRegionYs\r\n  }, {\r\n    marker: {\r\n      color: 'green',\r\n      size: 5\r\n    },\r\n    mode: 'markers',\r\n    name: 'current solution',\r\n    type: 'scatter',\r\n    x: [point ? point[0] : null],\r\n    y: [point ? point[1] : null]\r\n  }];\r\n  \r\n  return (\r\n    <>\r\n      <Typography align=\"left\" display=\"block\" variant=\"h6\">Geometric representation</Typography>\r\n      <Plot\r\n        style={{\r\n          height: \"50vh\"\r\n        }}\r\n        data = {data}\r\n        layout = {{\r\n          hovermode: 'closest',\r\n          shapes: shapes,\r\n          title: title,\r\n          xaxis: {\r\n            range: [-maxX/10, maxX],\r\n            scaleanchor: \"y\", \r\n            scaleratio: 1\r\n            // fixedrange: true\r\n          },\r\n          yaxis: {\r\n            range: [-maxX/10, maxX],\r\n            // fixedrange: true\r\n          },\r\n          // width: 1000,\r\n          // height: 500,\r\n          responsive: true,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PlotGraph;","import example1 from './example1.json'\r\nimport example2 from './example2.json'\r\nimport example3 from './example3.json'\r\n\r\nexport default {\r\n    example1,\r\n    example2,\r\n    example3\r\n};","  \r\nimport React, { useState } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { Description } from '@material-ui/icons';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport files from '../examples';\r\n// import adapt from '../utilities/arrangeNodes';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    doc: {\r\n        display: 'inline-block', \r\n        margin: 20\r\n    },\r\n}));\r\n\r\n\r\nlet ExamplesManager = (props) => {\r\n    const classes = useStyles();\r\n\r\n    var [ clicked, setClicked ] = useState();\r\n    \r\n    return (\r\n        <>\r\n            {/*Alternatively, t*/}Try one of the following examples:\r\n            \r\n            <br/>\r\n            \r\n            {Object.keys(files).map(k => (\r\n                <div key={k} className={classes.doc}>\r\n                    {!props.loading && <Description onClick={() => {setClicked(k); props.getFile( /*adapt(*/ files[k] /*)*/ )}} fontSize='large'/>}\r\n                    {props.loading && k===clicked && <CircularProgress color='inherit' fontSize='large'/>}\r\n                    <br/>\r\n                    {k}\r\n                </div>\r\n            ))}\r\n        </>\r\n)}\r\n\r\nexport default ExamplesManager;","import React from 'react';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    info: {\r\n        listStyleType: \"'»'\",\r\n        padding: 0,\r\n        width: '80%'\r\n    },\r\n    infoEntry: {\r\n        padding: 5,\r\n        textAlign: 'left'\r\n    },\r\n}));\r\n\r\nlet InfoBox = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Typography align=\"left\" display=\"block\" variant=\"h6\">Info box</Typography>\r\n            <ul className={classes.info}>\r\n                {props.info && props.info.length > 0 ? props.info.map(n => (<li className={classes.infoEntry} key={n}>{n}<br/></li>)) : <li className={classes.infoEntry} key='emptyInfo'>No information available yet<br/></li>}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\n\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport Latex from 'react-latex';\r\n\r\nlet OriginalProblem = (props) => {\r\n    const { objectiveFunction, subjectTo: { A, b, sign } } = props.problem;\r\n\r\n    let constructEquation = (arr) =>{\r\n        let equation = \"\";\r\n        arr.forEach((cost, i) => {\r\n            if(cost !== 0){\r\n                if(!equation) {\r\n                    if(cost === 1) equation += `\\\\quad \\\\; \\\\; x_{${i+1}} `;\r\n                    else if(cost === -1) equation += `\\\\quad -x_{${i+1}} `;\r\n                    else {\r\n                        if(cost > 0) equation += `\\\\; \\\\; \\\\; ${cost}x_{${i+1}} `;\r\n                        else equation += `${cost}x_{${i+1}} `;\r\n                    }\r\n                }\r\n                else if(cost > 0){\r\n                    if(cost === 1) equation += `\\\\; \\\\; +x_{${i+1}} `;\r\n                    else equation += `+${cost}x_{${i+1}} `;\r\n                }\r\n                else {\r\n                    if(cost === -1) equation += `\\\\; -x_{${i+1}} `;\r\n                    else equation += `${cost}x_{${i+1}} `;\r\n                }\r\n            }\r\n            else{\r\n                equation += '\\\\; \\\\; \\\\; \\\\qquad ';\r\n            }\r\n        });\r\n\r\n        return equation;\r\n    }\r\n\r\n    let objectiveFunctionString = constructEquation(objectiveFunction);\r\n\r\n    let constraintsString = \"\";\r\n\r\n    A.forEach((contraint, i) => {\r\n        constraintsString += \" \\\\qquad \";\r\n        constraintsString += constructEquation(contraint);\r\n        constraintsString += sign[i] > 0 ? '\\\\geq ' : ( sign[i] < 0 ? '\\\\leq ' : '= ' );\r\n        constraintsString += `${b[i]} \\\\\\\\`;\r\n    })\r\n\r\n    constraintsString += \" \\\\qquad \\\\quad \\\\; x_1, \\\\quad \\\\; x_2  \\\\geq 0\";\r\n\r\n    const text = `$$\\\\begin{cases} \\\\min ${objectiveFunctionString} \\\\\\\\ ${constraintsString} \\\\end{cases}$$`;\r\n\r\n    return (\r\n        <>\r\n            <Typography align=\"left\" display=\"block\" variant=\"h6\">Formal problem</Typography>\r\n            <div style={{margin: '20px 0px'}}>\r\n                <Latex>{text}</Latex>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OriginalProblem;","import React from 'react';\r\n\r\nimport { Table, TableRow, TableHead, TableCell, TableBody, Typography } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport { formatNumber } from '../utils';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    empty:{\r\n        textAlign: 'left'\r\n    },\r\n    pivot: {\r\n        backgroundColor: 'red',\r\n        color: 'white'\r\n    },\r\n    pivotColumn: {\r\n        backgroundColor: 'rgba(255,0,0,0.3)',\r\n        color: 'white'\r\n    },\r\n    pivotRow: {\r\n        backgroundColor: 'rgba(255,0,0,0.3)',\r\n        color: 'white',\r\n        '&>*': {\r\n            color: 'white'\r\n        }\r\n    }\r\n}));\r\n\r\nlet Tableau = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const { bOverbar, BInvB, cBar0, cPrimeBarB, cPrimeBarF, FOverbar, indexH, indexT, showIndexH, showIndexT, showPivot, xBLabels, xFLabels } = props.page;\r\n\r\n    return (\r\n        <>\r\n            <Typography align=\"left\" display=\"block\" variant=\"h6\">Tableau</Typography>\r\n            {Boolean(Object.keys(props.page).length) && <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell key=\"head-empty-1\"></TableCell>\r\n                        <TableCell key=\"head-empty-2\"></TableCell>\r\n                        {xBLabels.map(n => (<TableCell key={`label-${n}`}>{n}</TableCell>))}\r\n                        {xFLabels.map((n, i) => (\r\n                            <TableCell \r\n                                key={`label-${n}`}\r\n                                className={\r\n                                    showIndexH && \r\n                                    indexH===i ? classes.pivotColumn : ''\r\n                                } \r\n                            >{n}</TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell key='-z'>-z</TableCell>\r\n                        <TableCell key='cBar0'>{formatNumber(cBar0)}</TableCell>\r\n                        {cPrimeBarB[0].map((n, i) => (<TableCell key={`cPrimeBarB${i}`}>{formatNumber(n)}</TableCell>))}\r\n                        {cPrimeBarF[0].map((n, i) => (\r\n                            <TableCell \r\n                                key={`cPrimeBarF${i}`}\r\n                                className={\r\n                                    showIndexH && \r\n                                    indexH===i ? classes.pivotColumn : ''\r\n                                } \r\n                            >{formatNumber(n)}</TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                    {xBLabels.map((n,i) => (\r\n                        <TableRow key={`baseValuesRow${i}`}\r\n                            className={\r\n                                showIndexT && \r\n                                indexT===i ? classes.pivotRow : ''\r\n                            } \r\n                        >\r\n                            <TableCell key={`baseValues${n}`}>{n}</TableCell>\r\n                            <TableCell key={`bOverbar${i}`}>{formatNumber(bOverbar[i][0])}</TableCell>\r\n                            {BInvB[i].map((n1, j) => (<TableCell key={`BInvB${j}_${i},${n1}`}>{formatNumber(n1)}</TableCell>))}\r\n                            {FOverbar[i].map((n1, j) => (\r\n                                <TableCell \r\n                                    className={\r\n                                        showPivot && indexH===j && indexT===i ? classes.pivot : \r\n                                            showIndexH && indexH===j ? classes.pivotColumn : ''\r\n                                    } \r\n                                    key={`FOverbar${j}_${i},${n1}`}\r\n                                >\r\n                                    {formatNumber(n1)}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>}\r\n            {!Boolean(Object.keys(props.page).length) && <div className={classes.empty}>\r\n                Tableau will be displayed during algorithm execution\r\n            </div>} \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tableau;","import React, { useState } from 'react';\r\nimport PlotGraph from './PlotGraph';\r\n\r\n// import Dropzone from './Dropzone';\r\nimport ExamplesManager from './ExamplesManager';\r\nimport InfoBox from './InfoBox';\r\nimport OriginalProblem from './OriginalProblem';\r\n// import RandomManager from './RandomManager';\r\nimport Tableau from './Tableau';\r\n\r\nimport { Button, Grid, Paper } from '@material-ui/core';\r\n\r\nimport { formatNumber, getY } from '../utils';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nvar numbers = require('numbers');\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    button: {\r\n        float: 'left',\r\n        marginTop: 10,\r\n        marginRight: 10,\r\n        border: '1px solid rgba(0,0,0,0.3)'\r\n    },\r\n    drop: {\r\n        height: '40vh',\r\n        width: '80%',\r\n        marginTop: 50,\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        transition: '1s'\r\n    },\r\n    dropClosed: {\r\n        height: 0,\r\n        width: '80%',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        transition: '1s'\r\n    },\r\n    generator: {\r\n        height: '10vh',\r\n        width: '80%',\r\n        marginTop: 50,\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        transition: '1s'\r\n    },\r\n    graph: {\r\n        width: '80%',\r\n        height: 'calc(100% - 200px)',\r\n        margin: 'auto',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    grid: {\r\n        padding: 12\r\n    },\r\n    loading: {\r\n        width: 50,\r\n        float: 'right',\r\n        margin: '10px 10px'\r\n    },\r\n    paper: {\r\n        backgroundColor: 'rgb(200, 0, 0)',\r\n        color: 'white',\r\n        marginTop: 50,\r\n        width: '80%',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        fontSize: 20,\r\n    },\r\n    paperDiv: {\r\n        padding: '15px 0 15px 0',\r\n        width: '100%',\r\n        transition: '0.2s'\r\n    },\r\n    paperDivHide: {\r\n        height: 0,\r\n        width: '100%',\r\n        transition: '0.2s',\r\n        overflow: 'hidden'\r\n    },\r\n    spacer: {\r\n        position: 'relative',\r\n        height: 80\r\n    }\r\n}));\r\n\r\nconst DEBUG=false;\r\n\r\nlet LPP = () => {\r\n    let [feasibleRegion, setFeasibleRegion] = useState([]);\r\n    let [file, setFile] = useState();\r\n    let [lines, setLines] = useState([]);\r\n    let [loading, setLoading] = useState(false);\r\n    let [maxX, setMaxX] = useState(30);\r\n    let [message, setMessage] = useState('');\r\n    let [phase, setPhase] = useState(0);\r\n    let [polygon, setPolygon] = useState([ [0,0], [maxX + 5,0], [maxX + 5,maxX + 5], [0,maxX + 5] ]);\r\n    let [stage, setStage] = useState(0);\r\n    let [step, setStep] = useState(0);\r\n\r\n    let [history, setHistory] = useState([]);\r\n    let [page, setPage] = useState(0);\r\n    let [finished, setFinished] = useState(false);\r\n    \r\n    const classes = useStyles();\r\n\r\n    let drawAdmissiblePlan = (thisFile) => {\r\n        const { A, b, sign } = thisFile.subjectTo;\r\n\r\n        let startLines = lines;\r\n        let startPolygon = polygon;\r\n\r\n        A.forEach((el, i) => {\r\n            let thisLine = [el[0], el[1], -b[i], sign[i]]\r\n            startLines = [...startLines, thisLine]\r\n            startPolygon = onAdd(thisLine, startPolygon);\r\n        })\r\n\r\n\r\n        setLoading(false);\r\n\r\n        setFile(thisFile);\r\n        setLines(startLines);\r\n        setPolygon(startPolygon);\r\n\r\n        let boundingBox = findBoundingBox(startPolygon);\r\n\r\n        let startFeasibleRegion = findIntegerFeasibleRegion(boundingBox, startPolygon);\r\n        setFeasibleRegion(startFeasibleRegion);\r\n\r\n        let maxxxX = startPolygon.reduce((acc, curr) =>  Math.max(acc, ...curr), 0) * 2;\r\n        setMaxX(maxxxX);\r\n    }\r\n    \r\n    let findBoundingBox = (polygon) => {\r\n        let polygonMaxX = null,\r\n            polygonMaxY = null,\r\n            polygonMinX = null,\r\n            polygonMinY = null;\r\n\r\n        if(!polygon.length) return null;\r\n        \r\n        polygon.forEach(el => {\r\n            const [x, y] = el.map(n => Math.floor(n));\r\n\r\n            polygonMaxX = polygonMaxX === null || x > polygonMaxX ? x : polygonMaxX;\r\n            polygonMaxY = polygonMaxY === null || y > polygonMaxY ? y : polygonMaxY;\r\n            polygonMinX = polygonMinX === null || x < polygonMinX ? x : polygonMinX;\r\n            polygonMinY = polygonMinY === null || y < polygonMinY ? y : polygonMinY;\r\n        })\r\n\r\n        return { polygonMaxX, polygonMaxY, polygonMinX, polygonMinY };\r\n    }\r\n\r\n    let findIntegerFeasibleRegion = (boundingBox, polygon) => {\r\n        if(!boundingBox) return [];\r\n\r\n        const { polygonMaxX, polygonMaxY, polygonMinX, polygonMinY } = boundingBox;\r\n\r\n        let feasibleRegion = [];\r\n\r\n        for(let i=polygonMinX; i<=polygonMaxX; i++){\r\n            for(let j=polygonMinY; j<=polygonMaxY; j++){\r\n\r\n                if(polygon.every((el, k) => {\r\n                    const l_p1 = el;\r\n                    const l_p2 = k === (polygon.length-1) ? polygon[0] : polygon[k+1];\r\n\r\n                    const d = numbers.matrix.determinant([\r\n                        [l_p1[0], l_p2[0], i],\r\n                        [l_p1[1], l_p2[1], j],\r\n                        [1, 1, 1],\r\n                    ]);\r\n\r\n                    return d >= 0;\r\n                })){\r\n                    feasibleRegion.push([i,j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return feasibleRegion;\r\n    }\r\n\r\n    let findIntersection = (line, segment) => {\r\n        let [a, b, c] = line;\r\n        let [[x1, y1], [x2, y2]] = segment;\r\n\r\n        if(a/b === Infinity){\r\n            //Parallel to y axis\r\n            if((-c/a < x1 && -c/a > x2) || (-c/a > x1 && -c/a < x2)) {\r\n                let lambda = (x2 + c/a)/(x2 - x1)\r\n                let y = lambda * y1 + (1 - lambda) * y2;\r\n\r\n                return [formatNumber(-c/a), formatNumber(y)]\r\n            }\r\n        } \r\n        else if(b/a === Infinity){\r\n            //Parallel to x axis\r\n            if((-c/b < y1 && -c/b > y2) || (-c/b > y1 && -c/b < y2)) {\r\n                let lambda = (y2 + c/b)/(y2 - y1)\r\n                let x = lambda * x1 + (1 - lambda) * x2;\r\n\r\n                return [formatNumber(x), formatNumber(-c/b)]\r\n            }\r\n        } \r\n        else{\r\n            let lambda = - (a*x2 + b*y2 + c)/(a*(x1-x2) + b*(y1-y2));\r\n\r\n            if(lambda && lambda >= 0 && lambda <= 1){\r\n                let x = lambda * x1 + (1 - lambda) * x2;\r\n                let y = lambda * y1 + (1 - lambda) * y2;\r\n\r\n                return [formatNumber(x), formatNumber(y)]\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    let handleHistory = (next = false) => {\r\n        if(next){\r\n            //Create new page only if algorithm has not finished and next page does not exist\r\n            if(!((history[page] && history[page].finished) || history[page+1])){\r\n                onIntegerSimplexAlgorithm();\r\n            }\r\n            if(history[0]) setPage(page+1);\r\n        }\r\n        else{\r\n            if(history[page]) setPage(page-1)\r\n        }\r\n    }\r\n\r\n    let getFile = f => {\r\n        setLoading(true);\r\n        if(DEBUG) console.log('FILE:', f)\r\n        drawAdmissiblePlan(f);\r\n    }\r\n\r\n    let onAdd = (line, thisPolygon) => {\r\n        const [a, b, c, s] = line;\r\n\r\n        if(DEBUG){\r\n            console.log(`Adding ${a}x`, `${b > 0 ? '+' : '-'} ${Math.abs(b)}y`, s > 0 ? '>' : '<', `${-c}`);\r\n            console.log(`AKA y`, `${a/b > 0 ? '+' : '-'} ${Math.abs(a/b)}x`, s > 0 ? '>' : '<', `${-c/b}`);\r\n        }\r\n\r\n        let polygonLeft = [], polygonRight = [];\r\n        \r\n        let currentPolygon = polygonLeft;\r\n        let intersections = []\r\n\r\n        for(let i=0; i<thisPolygon.length; i++){\r\n            let p1 = thisPolygon[i];\r\n            \r\n            if(intersections.length === 2){\r\n                currentPolygon.push(p1);\r\n                continue;\r\n            }\r\n\r\n            let j = i+1<thisPolygon.length ? i+1 : 0;\r\n            let p2 = thisPolygon[j];\r\n\r\n            let intersection = findIntersection(line, [p1, p2]);\r\n\r\n            if(intersection){\r\n                if(intersections.length === 1){\r\n                    currentPolygon.push(p1);\r\n                    currentPolygon.push(intersection);\r\n                    currentPolygon=polygonLeft;\r\n                    currentPolygon.push(intersection);\r\n                }\r\n                else{\r\n                    currentPolygon.push(p1);\r\n                    currentPolygon.push(intersection);\r\n                    currentPolygon=polygonRight;\r\n                    currentPolygon.push(intersection);\r\n                }\r\n            \r\n                intersections.push(intersection);\r\n            }\r\n            else{\r\n                currentPolygon.push(p1);\r\n            }\r\n        }\r\n\r\n        const l_p1 =  [\r\n            b !== 0 ? -maxX : -c/a, \r\n            getY(line, -maxX, maxX)\r\n        ];\r\n        const l_p2 = [\r\n            line[1] !== 0 ? maxX : -c/a, \r\n            getY(line, maxX, maxX)\r\n        ];\r\n\r\n        //THERE IS AN INTERSECTION\r\n        //If d>0, polygon is in > region\r\n        //Otherwise in < region\r\n        //If s and d have same sign, polygon is correct\r\n        if(polygonRight.length > 0){\r\n            const barycenter = polygonRight.reduce((prev, curr) => [curr[0] + prev[0], curr[1] + prev[1]], [0,0]).map(n => n/polygonRight.length);\r\n            \r\n            let d = numbers.matrix.determinant([\r\n                [l_p1[0], l_p2[0], barycenter[0]],\r\n                [l_p1[1], l_p2[1], barycenter[1]],\r\n                [1, 1, 1],\r\n            ]);\r\n\r\n            if(b === 0 && a<0) return s*d < 0 ? polygonRight : polygonLeft\r\n            return s*d > 0 ? polygonRight : polygonLeft\r\n        }\r\n        else{\r\n            const barycenter = polygonLeft.reduce((prev, curr) => [curr[0] + prev[0], curr[1] + prev[1]], [0,0]).map(n => n/polygonLeft.length);\r\n\r\n            let d = numbers.matrix.determinant([\r\n                [l_p1[0], l_p2[0], barycenter[0]],\r\n                [l_p1[1], l_p2[1], barycenter[1]],\r\n                [1, 1, 1],\r\n            ]);\r\n\r\n            return s*d >= 0 ? polygonLeft : polygonRight\r\n        }\r\n    }\r\n\r\n    let onClear = () => {\r\n        setFeasibleRegion([]);\r\n        setFile();\r\n        setLines([]);\r\n        setLoading(false);\r\n        setMaxX(30);\r\n        setMessage('');\r\n        setPhase(0);\r\n        setPolygon([ [0,0], [maxX + 5,0], [maxX + 5,maxX + 5], [0,maxX + 5] ]);\r\n        setStage(0);\r\n        setStep(0);\r\n\r\n        setHistory([]);\r\n        setPage(0);\r\n        setFinished(false);\r\n    }\r\n\r\n    let onIntegerSimplexAlgorithm = () => {\r\n        const algorithm = require('../algorithms/cuttingPlane.js')\r\n\r\n        let newPage = null;\r\n        if(phase > 0 && phase < 4){\r\n            newPage = JSON.parse(JSON.stringify(history[page])); \r\n        }\r\n\r\n        let bOverbarGen = null, \r\n            BInvBGen = null, \r\n            FOverbarGen = null, \r\n            bOverbarGenFloor = null, \r\n            BInvBGenFloor = null, \r\n            FOverbarGenFloor = null;\r\n\r\n        if([2,3].includes(phase)){\r\n            bOverbarGen = newPage.bOverbar[newPage.genRowIndex][0];\r\n            BInvBGen = newPage.BInvB[newPage.genRowIndex];\r\n            FOverbarGen = newPage.FOverbar[newPage.genRowIndex];\r\n            \r\n            bOverbarGenFloor = Math.floor(bOverbarGen);\r\n            BInvBGenFloor = BInvBGen.map(n => Math.floor(n));\r\n            FOverbarGenFloor = FOverbarGen.map(n => Math.floor(n));\r\n        }\r\n\r\n        switch(phase){\r\n            case 0:\r\n                //COMPUTE SIMPLEX\r\n                if(finished){\r\n                    newPage = JSON.parse(JSON.stringify(history[page])); \r\n                    newPage.info = [`Simplex algorithm finished`, `Checking integrality of the solution`];\r\n                    setHistory([...history, newPage]);\r\n                    setFinished(false);\r\n                    setPhase(1);\r\n                }\r\n                else {\r\n                    //COMPUTE SIMPLEX\r\n                    onSimplexAlgorithm();\r\n                }\r\n\r\n                break;\r\n            case 1:\r\n                //CHECK INTEGRALITY\r\n                newPage.genRowIndex = algorithm.optimalityTest(newPage.bOverbar);\r\n\r\n                if(newPage.genRowIndex < 0 || newPage.genRowIndex===null){\r\n                    setPhase(5);\r\n                    newPage.finished = true;\r\n                    newPage.info = ['The solution satisfies integrality'];\r\n\r\n                    if(newPage.genRowIndex===null){\r\n                        newPage.infeasible = true;\r\n                        newPage.info.push('But it is infeasible');\r\n                    }\r\n                    else{\r\n                        newPage.info.push('Optimal integer solution found');\r\n                    }\r\n                }\r\n                else {\r\n                    setPhase(2);\r\n                    newPage.info = ['The solution does not satisfy integrality'];\r\n                    newPage.info.push('Applying cutting plane');\r\n                }\r\n                break;\r\n            case 2:\r\n                newPage.info = ['Computing new constraint', 'Applying cut'];\r\n                const newLine = algorithm.computeSlackOrLine(\r\n                    newPage.slacks, \r\n                    -bOverbarGenFloor, \r\n                    BInvBGenFloor, \r\n                    newPage.xBLabels, \r\n                    FOverbarGenFloor, \r\n                    newPage.xFLabels,\r\n                    'line'\r\n                );\r\n\r\n                newPage.lines.push(newLine);\r\n                newPage.polygon = onAdd(newLine, newPage.polygon);\r\n                newPage.feasibleRegion = findIntegerFeasibleRegion(findBoundingBox(newPage.polygon), newPage.polygon);\r\n                setPhase(3);\r\n                break;\r\n            case 3:\r\n                //APPLY CUT\r\n                const newSlackIndex = newPage.xBLabels.length + newPage.xFLabels.length + 1;\r\n\r\n                const xBLabelsOld = [...newPage.xBLabels];\r\n\r\n                const bOverbarRim = [bOverbarGenFloor - bOverbarGen];\r\n                const BInvBRim = numbers.matrix.subtraction([BInvBGenFloor], [BInvBGen]);\r\n                const FOverbarRim = numbers.matrix.subtraction([FOverbarGenFloor], [FOverbarGen]);\r\n\r\n                newPage.xBLabels.push(`x${newSlackIndex}`);\r\n                newPage.cPrimeBarB[0].push(0);\r\n                newPage.bOverbar.push(bOverbarRim);\r\n                newPage.BInvB.push(...BInvBRim);\r\n                \r\n                newPage.info = ['Adding rim to tableau'];\r\n\r\n                //BECAUSE BEFORE THERE WHERE bOverbarGen.length BASE ELEMENTS, NOW bOverbarGen.length+1\r\n                newPage.BInvB = newPage.BInvB.map((n,i) => [...n, i === newPage.bOverbar.length - 1 ? 1 : 0]);\r\n\r\n                newPage.FOverbar.push(...FOverbarRim);\r\n\r\n                newPage.slacks[`x${newSlackIndex}`] = algorithm.computeSlackOrLine(\r\n                    newPage.slacks, \r\n                    bOverbarRim[0], \r\n                    BInvBRim[0], \r\n                    xBLabelsOld, \r\n                    FOverbarRim[0], \r\n                    newPage.xFLabels,\r\n                    'slack'\r\n                );\r\n\r\n                newPage.info.push(`Computing new slack x${newSlackIndex} as function of original variables`);\r\n\r\n                setStage(2);\r\n                setStep(0);\r\n                setPhase(4);\r\n                break;\r\n            case 4:\r\n                if(finished){\r\n                    newPage = JSON.parse(JSON.stringify(history[page])); \r\n                    newPage.info = [`Dual simplex algorithm finished`, `Checking integrality of the solution`];\r\n                    setHistory([...history, newPage]);\r\n                    setFinished(false);\r\n                    setPhase(1);\r\n                }\r\n                else{\r\n                    //FIND NEW X* BY DUAL SYMPLEX\r\n                    //REPEAT FROM 1\r\n                    onSimplexAlgorithm(true);\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if(phase > 0 && phase < 4) setHistory([...history, newPage]);\r\n    }\r\n\r\n    let onSimplexAlgorithm = () => {\r\n        const { objectiveFunction: cPrime, subjectTo: { A, b } } = file;\r\n\r\n        const algorithm = require('../algorithms/simplexTableau.js')\r\n\r\n        let newPage = null;\r\n        if(stage > 0){\r\n            newPage = JSON.parse(JSON.stringify(history[page]));\r\n        }\r\n        \r\n        switch(stage){\r\n            case 0:\r\n                const initValues = {feasibleRegion, info: ['Applying simplex algorithm', 'Initializing tableau'], lines, polygon, ...algorithm.init(A, b, cPrime)};\r\n\r\n                setHistory([initValues]);\r\n                setStage(stage+1);\r\n                break;\r\n\r\n            case 1:\r\n                switch(step){\r\n                    case 0:\r\n                        newPage.indexH = algorithm.optimalityTest(newPage.cPrimeBarF[0]);\r\n                        newPage.info = ['Checking optimality...']\r\n\r\n                        if(isNaN(newPage.indexH)) {\r\n                            newPage.info.push('Found no valid cadidate to enter base');\r\n\r\n                            if(page === 0){\r\n                                let bOverbarIndexes = [];\r\n                                newPage.bOverbar.forEach((el,i) => {if(-el[0] < 0) bOverbarIndexes.push(i)});\r\n\r\n                                newPage.info.push('Checking if problem can be solved with dual simplex');\r\n                                if(bOverbarIndexes.length > 0){\r\n                                    // ADMISSIBLE FOR DUAL SIMPLEX\r\n                                    newPage.info.push('Problem satisfies dual simplex feasibility rules');\r\n\r\n                                    let nonZeroElements = {}\r\n                                    bOverbarIndexes.forEach( idx => {\r\n                                        const count = newPage.FOverbar[idx].filter(n => n>0).length;\r\n                                        nonZeroElements[count] = count in nonZeroElements ? [...nonZeroElements[count], idx] : [idx];\r\n                                    });\r\n                                    const minNonZeroCount = Math.min(...Object.keys(nonZeroElements));\r\n                                    const multiplyByMinusOne = nonZeroElements[minNonZeroCount];\r\n\r\n                                    multiplyByMinusOne.forEach( idx => {\r\n                                        newPage.bOverbar[idx][0] *= -1;\r\n                                        newPage.FOverbar = numbers.matrix.rowScale(newPage.FOverbar, idx, -1);\r\n\r\n                                        const slack = newPage.xBLabels[idx];\r\n                                        newPage.slacks[slack] = [\r\n                                            ...newPage.FOverbar[idx].map(n => -n),\r\n                                            newPage.bOverbar[idx][0]\r\n                                        ]\r\n                                    });\r\n\r\n                                    newPage.info.push(`Multiplying row(s) ${multiplyByMinusOne.map(n => n+1).join(', ')} by -1`);\r\n\r\n                                    setStage(2);\r\n                                    setStep(0);\r\n                                }\r\n                                else{\r\n                                    // NOT ADMISSIBLE FOR DUAL SIMPLEX\r\n                                    newPage.info.push('Problem does not satisfy dual simplex feasibility rules');\r\n                                    setFinished(true);\r\n                                }\r\n                            }\r\n                            else{\r\n                                // NOT ADMISSIBLE FOR DUAL SIMPLEX\r\n                                newPage.info.push('Found optimal solution');\r\n                                setFinished(true);\r\n                            }\r\n                        }\r\n                        else {\r\n                            newPage.info.push(`Solution can be improved`);\r\n                            newPage.info.push(`Found candidate at column ${newPage.indexH+1} of out of base variables`);\r\n                            newPage.info.push(`Variable ${newPage.xFLabels[newPage.indexH]} will enter the base`);\r\n                            newPage.showIndexH = true;\r\n                            setStep(1);\r\n                        }\r\n\r\n                        setHistory([...history, newPage]);\r\n\r\n                        break;\r\n\r\n                    case 1:\r\n                        newPage.info = [`Looking for a valid candidate to leave base`];\r\n                        const pivot = algorithm.findPivot(newPage.bOverbar, newPage.FOverbar, newPage.indexH);\r\n                        newPage = {...newPage, ...pivot};\r\n                        \r\n                        newPage.info.push(`Found candidate at row ${newPage.indexT+1}`);\r\n                        newPage.info.push(`Variable ${newPage.xBLabels[newPage.indexT]} will leave the base`);\r\n                        newPage.info.push(`Found pivot at column ${newPage.indexH+1} of out of base variables, and row  ${newPage.indexT+1}`);\r\n                        newPage.info.push(`Pivot value is ${newPage.FOverbar[newPage.indexT][newPage.indexH]}`);\r\n\r\n                        setStep(2);\r\n                        setHistory([...history, newPage]);\r\n\r\n                        break;\r\n\r\n                    case 2:\r\n                        newPage = algorithm.updateTableau(newPage);\r\n                        newPage.info = [`Apply pivoting and updating tableau`];\r\n\r\n                        setStep(0);\r\n                        setHistory([...history, newPage]);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            case 2:\r\n                switch(step){\r\n                    case 0:\r\n                        newPage.info = ['Applying dual simplex', 'Checking dual optimality...']\r\n                        newPage.indexT = algorithm.dualOptimalityTest(newPage.bOverbar);\r\n\r\n                        if(!Number.isInteger(newPage.indexT)) {\r\n                            newPage.info.push('Found optimal solution');\r\n                            setFinished(true);\r\n                        }\r\n                        else {\r\n                            newPage.info.push(`Solution can be improved`);\r\n                            newPage.info.push(`Found candidate at row ${newPage.indexT+1}`);\r\n                            newPage.info.push(`Variable ${newPage.xBLabels[newPage.indexT]} will leave the base`);\r\n                            newPage.showIndexT = true;\r\n                            setStep(1);\r\n                        }\r\n\r\n                        setHistory([...history, newPage]);\r\n\r\n                        break;\r\n\r\n                    case 1:\r\n                        newPage.info = [`Looking for a valid candidate to enter the base`];\r\n                        const pivot = algorithm.dualFindPivot(newPage.cPrimeBarF, newPage.FOverbar, newPage.indexT, newPage.xFLabels);\r\n\r\n                        if(pivot.indexH === null){\r\n                            newPage.info.push(`No valid candidate found`);\r\n                            setFinished(true);\r\n                            newPage.infeasible = true;\r\n                        }\r\n                        else{\r\n                            setStep(2);\r\n\r\n                            newPage.info.push(`Found candidate at column ${pivot.indexH+1}`);\r\n                            newPage.info.push(`Variable ${newPage.xBLabels[newPage.indexT]} will leave the base`);\r\n                            newPage.info.push(`Found pivot at column ${pivot.indexH+1} of out of base variables, and row ${newPage.indexT+1}`);\r\n                            newPage.info.push(`Pivot value is ${newPage.FOverbar[newPage.indexT][pivot.indexH]}`);\r\n                        }\r\n\r\n                        newPage = {...newPage, ...pivot};\r\n                        setHistory([...history, newPage]);\r\n\r\n                        break;\r\n\r\n                    case 2:\r\n                        newPage = algorithm.updateTableau(newPage);\r\n                        newPage.info = [`Apply pivoting and updating tableau`];\r\n\r\n                        setStep(0);\r\n                        setHistory([...history, newPage]);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // let showMessage = message => {\r\n    //     setMessage(message);\r\n    //     setTimeout(() => setMessage(''), 5000);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            {!file && <>\r\n                {/* <div className={file ? classes.dropClosed : classes.drop}>\r\n                    <Dropzone\r\n                        getFile={getFile}\r\n                        hide={file}\r\n                        showMessage={showMessage}\r\n                    />\r\n                </div> */}\r\n\r\n                <div className={file ? classes.dropClosed : classes.generator}>\r\n                    <ExamplesManager getFile={getFile} loading={loading} />\r\n                </div>\r\n\r\n                {/* <div className={file ? classes.dropClosed : classes.generator}>\r\n                    <RandomManager getFile={getFile} loading={loading} />\r\n                </div> */}\r\n                \r\n                <div className={classes.spacer}>\r\n                    <Paper className={classes.paper}>\r\n                        <div className={message ? classes.paperDiv : classes.paperDivHide}>\r\n                            {message}\r\n                        </div>\r\n                    </Paper>\r\n                </div>\r\n            </>}\r\n            {file && <Grid container direction='column' className={classes.grid}>\r\n                <Grid container direction='row' item xs={12} className={classes.grid}>\r\n                    <Grid container direction='row' item xs={5} className={classes.grid}>\r\n                        <Grid item xs={12}>\r\n                            <PlotGraph \r\n                                feasibleRegion={history[page] ? history[page].feasibleRegion : feasibleRegion}\r\n                                lines={history[page] ? history[page].lines : lines}\r\n                                maxX={maxX}\r\n                                polygon={history[page] ? history[page].polygon : polygon}\r\n                                point={history[page] ? history[page].point : null}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button variant='outlined' onClick={onClear}>CLEAR</Button>\r\n                            <Button variant='outlined' disabled={page <= 0} onClick={() => handleHistory()}>{\"<\"}</Button>\r\n                            <Button variant='outlined' disabled={!history[page+1] && history[page] && history[page].finished} onClick={() => handleHistory(true)}>{\">\"}</Button>\r\n                            {history[page] && page}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={7} className={classes.grid}>\r\n                        <Tableau page={history[page] ? history[page] : {}} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction='row' item xs={12} className={classes.grid}>\r\n                    <Grid item xs={5} className={classes.grid}>\r\n                        <OriginalProblem problem={file} />\r\n                    </Grid>\r\n                    <Grid item xs={7} className={classes.grid}>\r\n                        <InfoBox info={history[page] ? history[page].info : []}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LPP;","import React from 'react';\r\n\r\nimport NavBar from './components/NavBar';\r\nimport LPP from './components/LPP';\r\n\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n  root: {\r\n    textAlign: 'center'\r\n  },\r\n  logo: {\r\n    height: '40vmin'\r\n  },\r\n  header: {\r\n    backgroundColor: '#282c34',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    fontSize: 'calc(10px + 2vmin)',\r\n    color: 'white'\r\n  },\r\n  link: {\r\n    color: '#09d3ac'\r\n  },\r\n  top: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    width: '100%'\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    zIndex: 1,\r\n    minWidth: 0,\r\n    height: '100vh',\r\n    marginTop: 65\r\n  },\r\n  centerPane: {\r\n    flexGrow: 1,\r\n    height: '100%'\r\n  }\r\n}));\r\n\r\nlet App = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        <Router basename=\"/DS\">\r\n          <div className={classes.top}>\r\n            <NavBar />\r\n            <main className={classes.container}>\r\n              <div className={classes.centerPane}>\r\n                <Switch>\r\n                  <Route\r\n                    exact path=\"/\"\r\n                    component={LPP}\r\n                  />\r\n                </Switch>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const formatNumber = (num) => Math.round((num + Number.EPSILON) * 10000) / 10000;\r\n\r\nexport const getPoint = (xBLables, bOverbar) => {\r\n    let x1Idx = xBLables.indexOf('x1');\r\n    let x2Idx = xBLables.indexOf('x2');\r\n\r\n    let x1 = x1Idx >= 0 ? bOverbar[x1Idx][0] : 0;\r\n    let x2 = x2Idx >= 0 ? bOverbar[x2Idx][0] : 0;\r\n\r\n    return [x1, x2]\r\n}\r\n\r\nexport const getY = (line, x, max=10000) => {\r\n    let r = -(line[0]*(x) + line[2])/line[1];\r\n\r\n    return isFinite(r) ? r : r > 0 ? max : -max;\r\n}\r\n\r\nexport const getX = (line, y, max=10000) => {\r\n    let r = -(line[1]*(y) + line[2])/line[0];\r\n\r\n    return isFinite(r) ? r : r > 0 ? max : -max;\r\n}\r\n\r\nexport const swapColumns = (B, indexT, F, indexH) => {\r\n    B.forEach((el, i) => {\r\n        [el[indexT], F[i][indexH]] = [F[i][indexH], el[indexT]]\r\n    })\r\n\r\n    return [B, F]\r\n}\r\n\r\nexport default {getX, getY, swapColumns};"],"sourceRoot":""}